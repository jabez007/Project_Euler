"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Answer:
    76576500
Completed on Fri, 4 Apr 2014, 16:44
"""
from Problem3 import prime_factorization
from Problem8 import product


def main(n=500):
    triangle = 1
    triangle_number = 1
    divisors = 0

    while divisors <= n:
        triangle += 1
        triangle_number += triangle
        divisors = number_of_divisors(triangle_number)

    return triangle, triangle_number, divisors


def number_of_divisors(n):
    """
    The number of positive divisors of n is denoted by d(n) or tau(n).
    Clearly, for primes p, d(p)=2; and for prime powers, d(p**n)=n+1.
    For example, 3**4 has the five (4+1) positive divisors 1, 3, 3**2, 3**3, and 3**4.
    We can prove that d(x) is a multiplicative function, so this is enough to know d(n) for all integers n
    --if we have the prime factorization of n, then the number of divisors is
        tau(n) = (e1 + 1) * (e2 + 1) * (e3 + 1) * ... * (ek + 1).
        For example, 4200 is 2**3 * 3**1 * 5**2 * 7**1, so it has (3+1)*(1+1)*(2+1)*(1+1) = 48 positive divisors.
    :param n: <int> number we want to know how many divisors there are for
    :return: <int> number of divisors, including 1 and n
    """
    factorization = prime_factorization(n)
    return product([e + 1 for e in factorization.values()])

# # # #


if __name__ == '__main__':
    print main()
